CREATE OR REPLACE PROCEDURE INTEL_TEST_DB.BMATHUB_BASE.P_MASTER_ROOT_MAINTAIN()
RETURNS STRING
LANGUAGE SQL
AS
BEGIN
    MERGE INTO INTEL_TEST_DB.BMATHUB_BASE.T_ITEM_DETAIL_ROOT AS target
    USING INTEL_TEST_DB.MASTER_DATA.ITEM AS source
    ON target.ITEM_ID = source.ITEM_ID
    WHEN MATCHED THEN
       UPDATE SET target.ITEM_ID = source.ITEM_ID,target.ITEM_CLASS_NM = source.ITEM_CLASS_NM,target.ITEM_DSC = source.ITEM_DSC
    WHEN NOT MATCHED  AND source.DELETE_IND = 'FALSE' THEN
       INSERT (ITEM_ID, ITEM_CLASS_NM, ITEM_DSC)
    VALUES (source.ITEM_ID, source.ITEM_CLASS_NM,source.ITEM_DSC);
    
    
    MERGE INTO INTEL_TEST_DB.BMATHUB_BASE.T_LOCATION_ROOT AS target
    USING INTEL_TEST_DB.MASTER_DATA.LOCATION AS source
    ON target.ITEM_ID = source.ITEM_ID
    WHEN MATCHED THEN
       UPDATE SET target.ITEM_ID = source.ITEM_ID,target.ITEM_CLASS_NM = source.ITEM_CLASS_NM,target.LOCATION_ID = source.LOCATION_ID
    WHEN NOT MATCHED THEN
       INSERT (ITEM_ID, ITEM_CLASS_NM, LOCATION_ID)
    VALUES (source.ITEM_ID, source.ITEM_CLASS_NM,source.LOCATION_ID);
    
    
    
    MERGE INTO INTEL_TEST_DB.BMATHUB_BASE.T_ORIG_BOM AS target
    USING INTEL_TEST_DB.MASTER_DATA.ORIG_BOM AS source
    ON target.INPUT_ITEM_ID = source.INPUT_ITEM_ID 
    WHEN MATCHED THEN
       UPDATE SET target.ITEM_CLASS_NM = source.ITEM_CLASS_NM,target.OUTPUT_ITEM_ID = source.OUTPUT_ITEM_ID,target.LOCATION_ID = source.LOCATION_ID
    WHEN NOT MATCHED THEN
       INSERT (INPUT_ITEM_ID, ITEM_CLASS_NM,OUTPUT_ITEM_ID, LOCATION_ID)
    VALUES (source.INPUT_ITEM_ID, source.ITEM_CLASS_NM,source.OUTPUT_ITEM_ID,source.LOCATION_ID);
    RETURN 'Data inserted successfully.';
END;

CALL INTEL_TEST_DB.BMATHUB_BASE.P_MASTER_ROOT_MAINTAIN();